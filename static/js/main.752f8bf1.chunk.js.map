{"version":3,"sources":["components/style/table.module.scss","components/Table.tsx","components/container/TableContainer.tsx","store/tableReducer/constants/constants.ts","App.tsx","selectors/tableSelector/tableSelector.ts","store/tableReducer/actions/actionTables.ts","reportWebVitals.ts","store/tableReducer/tablesReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","Table","React","memo","dataUrl","firstDataItem","headRef","useRef","useState","topHeader","setTop","useEffect","window","addEventListener","handleScroll","removeEventListener","ref","target","scrollY","current","parentElement","offsetTop","offsetHeight","clientHeight","tableHeader","Object","entries","columnsName","map","index","value","className","style","headerT","sticky","tableBody","data","el","values","name","container","mtb3","tableResponsive","table","top","TableContainer","mapped","tables","length","ADD_TABLES","START_TABLE","fileJSON","App","json","tablesStore","useSelector","state","tablePage","tableSelector","dispatch","useDispatch","type","onChange","ev","files","f","i","reader","FileReader","onload","result","JSON","parse","newTable","ex","alert","readAsText","handleFileSelect","accept","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.752f8bf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"table_container__3n5lo\",\"mtb3\":\"table_mtb3__1BD5K\",\"table\":\"table_table__6RAfP\",\"sticky\":\"table_sticky__1D1Ry\",\"tableResponsive\":\"table_tableResponsive__2i4Xb\"};","import React, {\r\n  FC,\r\n  useEffect,\r\n  useRef,\r\n  useState\r\n} from 'react';\r\nimport style from './style/table.module.scss'\r\nimport {PropsType} from \"./types\";\r\n\r\nexport const Table: FC<PropsType> = React.memo(({dataUrl}) => {\r\n  const [firstDataItem] = dataUrl;\r\n  const headRef = useRef<HTMLTableSectionElement>(null)\r\n  const [topHeader, setTop] = useState(0)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [])\r\n  const handleScroll = () => {\r\n    const ref = headRef\r\n    const target = window.scrollY\r\n    if (ref.current &&\r\n      ref.current.parentElement\r\n      && ref.current.parentElement.offsetTop < target\r\n      && ref.current.parentElement.offsetTop\r\n      + ref.current.parentElement.offsetHeight\r\n      - ref.current.clientHeight > target) {\r\n      setTop(target - ref.current.parentElement.offsetTop)\r\n    } else if (ref.current &&\r\n      ref.current.parentElement\r\n      && ref.current.parentElement.offsetTop > target) {\r\n      setTop(0)\r\n    }\r\n  }\r\n  const tableHeader = Object.entries(firstDataItem.columnsName).map(\r\n    ([key, value], index) => (\r\n      <th\r\n        key={index + value}\r\n        className={`${style.headerT} ${style.sticky}`}>\r\n        {value}\r\n      </th>\r\n    )\r\n  );\r\n  const tableBody = firstDataItem.data.map((el, index) => (\r\n      <tr\r\n        key={index + el.name}>\r\n        {Object.values(el).map(\r\n          (value, index) => (\r\n            <td key={index + value}>\r\n              {value}\r\n            </td>\r\n          ))}\r\n      </tr>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div className={\r\n      `${style.container} ${style.mtb3} ${style.tableResponsive}`\r\n    }>\r\n      <table className={`${style.table}`}>\r\n        <thead ref={headRef} style={{top: topHeader}}>\r\n        <tr>{tableHeader}</tr>\r\n        </thead>\r\n        <tbody>{tableBody}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n});\r\n","import React, {FC} from 'react';\r\nimport {Table} from \"src/components\";\r\nimport {PropsType} from \"./types\";\r\n\r\n\r\nexport const TableContainer: FC<PropsType> = React.memo(({dataUrl}) => {\r\n  const mapped = dataUrl.map((tables, index) => (\r\n    <Table\r\n      dataUrl={tables}\r\n      key={tables.length + index}\r\n    />\r\n  ));\r\n\r\n  return <>{mapped}</>;\r\n});\r\n","export const ADD_TABLES = \"ADD_TABLES\";\r\nexport const START_TABLE = \"START_TABLE\";\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport './App.scss';\nimport fileJSON from \"../src/data.json\"\nimport {useDispatch, useSelector} from 'react-redux'\nimport {TableContainer} from \"src/components\";\nimport {AppRootStateType} from \"src/store/store\";\nimport {tableSelector} from \"./selectors\";\nimport {addTables, startTable} from \"./store/tableReducer/actions\";\n\nconst dataUrl = fileJSON;\n\nexport const App = () => {\n  let json;\n\n  const tablesStore = useSelector((state: AppRootStateType) => (\n    tableSelector(state)\n  ));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startTable(dataUrl));\n  }, []);\n\n  const handleFileSelect = (ev: ChangeEvent<HTMLInputElement>) => {\n    const files = ev.target.files;\n\n    if (files) {\n      for (let i = 0, f; f = files[i]; i++) {\n        const reader = new FileReader();\n\n        reader.onload = ((theFile) => {\n          return (ev: ProgressEvent<FileReader>) => {\n            if (ev.target) {\n              if (typeof ev.target.result === \"string\") {\n                try {\n                  json = JSON.parse(ev.target.result);\n                  dispatch(addTables(json));\n                } catch (ex) {\n                  alert('ex when trying to parse json = ' + ex);\n                }\n              }\n            }\n          }\n        })(f);\n        reader.readAsText(f);\n      }\n    }\n    return;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          className=\"inputFile\"\n          type=\"file\"\n          name=\"JSON file\"\n          onChange={(ev: ChangeEvent<HTMLInputElement>) => handleFileSelect(ev)}\n          accept=\".json\"\n        />\n      </header>\n      {tablesStore && (\n        <TableContainer dataUrl={tablesStore}/>\n      )}\n    </div>\n  );\n};\n","import {AppRootStateType} from \"src/store/store\";\r\nimport {TableType} from \"../../store/tableReducer/types\";\r\n\r\nexport const tableSelector = (state: AppRootStateType): TableType[][] => (\r\n  state.tablePage.tables\r\n);\r\n","import {ADD_TABLES, START_TABLE} from \"../constants\";\r\nimport {TableType} from \"../types\";\r\n\r\nexport const addTables = (newTable: TableType[]) => ({\r\n  type: ADD_TABLES,\r\n  newTable\r\n} as const);\r\nexport const startTable = (table: TableType[]) => ({\r\n  type: START_TABLE,\r\n  table\r\n} as const);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ADD_TABLES, START_TABLE} from \"./constants\";\r\nimport {ActionsType, InitStateType, TableType} from \"./types\";\r\n\r\nexport const initialState = {\r\n  tables: [] as Array<TableType[]>\r\n}\r\n\r\nexport const tablesReducer = (state = initialState, action: ActionsType): InitStateType => {\r\n  switch (action.type) {\r\n    case ADD_TABLES: {\r\n      return {\r\n        ...state,\r\n        tables: [...state.tables, action.newTable]\r\n      }\r\n    }\r\n    case START_TABLE: {\r\n      return {\r\n        ...state,\r\n        tables: [action.table]\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n};\r\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {tablesReducer} from \"src/store/tableReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tablePage: tablesReducer,\r\n});\r\n\r\nexport const store: Store<AppRootStateType> = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}