{"version":3,"sources":["Components/Table.module.scss","state/tablesReducer.ts","Components/Table.tsx","Components/TableContainer.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["module","exports","ADD_TABLES","START_TABLE","initialState","tables","Table","dataUrl","firstDataItem","tableHeader","Object","entries","columnsName","map","index","key","value","className","style","headerT","tableBody","data","el","values","container","mtb3","tableResponsive","table","sticky","TableContainer","mapped","fileJSON","App","json","tablesRender","useSelector","store","tablePage","dispatch","useDispatch","useEffect","type","name","onChange","e","evt","files","target","f","i","reader","FileReader","onload","result","JSON","parse","newTable","ex","alert","readAsText","handleFileSelect","accept","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","state","action","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b84c2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Table_container__2dkUM\",\"mtb3\":\"Table_mtb3__1E_30\",\"table\":\"Table_table__3IbPg\",\"sticky\":\"Table_sticky__3p_gh\",\"tableResponsive\":\"Table_tableResponsive__3B6xS\"};","const ADD_TABLES = 'ADD_TABLES'\r\nconst START_TABLE = 'START_TABLE'\r\n\r\n\r\nconst initialState = {\r\n    tables: [] as Array<TableType[]>\r\n}\r\ntype InitStateType = typeof initialState\r\n\r\nexport const tablesReducer = (state = initialState, action: ActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case ADD_TABLES: {\r\n            return {\r\n                ...state,\r\n                tables: [...state.tables, action.newTable]\r\n            }\r\n        }\r\n        case START_TABLE: {\r\n            return {\r\n                ...state,\r\n                tables: [action.table]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTables = (newTable: TableType[]) => ({type: ADD_TABLES, newTable} as const)\r\n\r\nexport type AddTablesType = ReturnType<typeof addTables>\r\nexport const startTable = (table: TableType[]) => ({type: START_TABLE, table} as const)\r\n\r\nexport type StartTableType = ReturnType<typeof startTable>\r\ntype ActionsType = AddTablesType | StartTableType\r\n\r\nexport type TableType = {\r\n    columnsName: DataType;\r\n    data: DataType[];\r\n    _id: string\r\n}\r\nexport type DataType = {\r\n    date: string,\r\n    name: string,\r\n    quantity: string,\r\n    distance: string,\r\n    column5: string,\r\n    column6: string,\r\n    column7: string,\r\n    column8: string,\r\n    column9: string,\r\n    column10: string,\r\n    column11: string,\r\n    column12: string,\r\n    column13: string,\r\n    column14: string,\r\n    column15: string,\r\n    column16: string,\r\n}\r\n","import React from 'react';\r\nimport style from './Table.module.scss'\r\nimport {TableType} from \"../state/tablesReducer\";\r\n\r\ntype TablePropsTypes = {\r\n    dataUrl: TableType[]\r\n}\r\n\r\nconst Table: React.FC<TablePropsTypes> = ({dataUrl}) => {\r\n    const [firstDataItem] = dataUrl;\r\n    const tableHeader = Object.entries(firstDataItem.columnsName)\r\n        .map(([key, value], index) => {\r\n            return <th key={index + key} className={style.headerT}>{value}</th>\r\n        })\r\n    const tableBody = firstDataItem.data.map((el) => {\r\n            return <tr>{Object.values(el).map((value, index) => (\r\n                <td key={index + value}>{value}</td>))}\r\n            </tr>\r\n        }\r\n    )\r\n    return (\r\n        <div className={`${style.container} ${style.mtb3} ${style.tableResponsive} `}>\r\n            <table className={`${style.table}`}>\r\n                <thead className={`${style.sticky}`}>\r\n                <tr>\r\n                    {tableHeader}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tableBody}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport Table from \"./Table\";\r\nimport {TableType} from \"../state/tablesReducer\";\r\n\r\ntype TableContainerType = {\r\n    dataUrl: TableType[][]\r\n}\r\n\r\nconst TableContainer: React.FC<TableContainerType> = ({dataUrl}) => {\r\n    const mapped = dataUrl.map((el) => <Table dataUrl={el}/>)\r\n    return (\r\n        <>{mapped}</>\r\n    );\r\n};\r\nexport default TableContainer;\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport './App.scss';\nimport fileJSON from \"../src/data.json\"\nimport {useDispatch, useSelector} from 'react-redux'\nimport {addTables, startTable, TableType} from \"./state/tablesReducer\";\nimport TableContainer from \"./Components/TableContainer\";\nimport {AppRootStateType} from \"./state/store\";\n\nconst dataUrl = fileJSON\n\nfunction App() {\n    let tablesRender = useSelector<AppRootStateType, TableType[][]>((store) => store.tablePage.tables)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(startTable(dataUrl))\n    }, [])\n    let json\n\n    function handleFileSelect(evt: ChangeEvent<HTMLInputElement>) {\n        let files = evt.target.files;\n        if (files) {\n            for (let i = 0, f; f = files[i]; i++) {\n                let reader = new FileReader();\n                reader.onload = (function (theFile) {\n                    return function (e: ProgressEvent<FileReader>) {\n                        if (e.target) {\n                            if (typeof e.target.result === \"string\") {\n                                try {\n                                    json = JSON.parse(e.target.result);\n                                    dispatch(addTables(json))\n                                } catch (ex) {\n                                    alert('ex when trying to parse json = ' + ex);\n                                }\n                            }\n                        }\n                    }\n                })(f);\n                reader.readAsText(f);\n            }\n        }\n        return\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <input className=\"inputFile\"\n                       type=\"file\"\n                       name='JSON file'\n                       onChange={(e) => handleFileSelect(e)}\n                       accept=\".json\"\n                />\n            </header>\n            {tablesRender && <TableContainer dataUrl={tablesRender}/>}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tablesReducer} from \"./tablesReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tablePage: tablesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}